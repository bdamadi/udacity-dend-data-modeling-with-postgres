# DROP TABLES

songplay_table_drop = "DROP TABLE IF EXISTS songplays"
user_table_drop = "DROP TABLE IF EXISTS users"
song_table_drop = "DROP TABLE IF EXISTS songs"
artist_table_drop = "DROP TABLE IF EXISTS artists"
time_table_drop = "DROP TABLE IF EXISTS time"

# CREATE TABLES

# For songplays table:
#   * Postgres's SERIAL datatype to generate primary key songplay_id
#   * All fields except song_id, artist_id, location and user_agent
#     are required.
songplay_table_create = ("""
CREATE TABLE songplays(
    songplay_id SERIAL PRIMARY KEY,
    start_time BIGINT NOT NULL,
    user_id INT NOT NULL,
    level VARCHAR NOT NULL,
    song_id VARCHAR,
    artist_id VARCHAR,
    session_id INT NOT NULL,
    location VARCHAR,
    user_agent VARCHAR
)
""")

# For users table, all fields are required.
user_table_create = ("""
CREATE TABLE users(
    user_id INT PRIMARY KEY,
    first_name VARCHAR NOT NULL,
    last_name VARCHAR NOT NULL,
    gender CHAR(1) NOT NULL,
    level VARCHAR NOT NULL
)
""")

# For songs table, all fields are required except duration
song_table_create = ("""
CREATE TABLE songs(
    song_id VARCHAR PRIMARY KEY,
    title VARCHAR NOT NULL,
    artist_id VARCHAR NOT NULL,
    year INT NOT NULL,
    duration NUMERIC
)
""")

# For artists table, location, latitude, and longitude may be null
artist_table_create = ("""
CREATE TABLE artists(
    artist_id VARCHAR PRIMARY KEY,
    name VARCHAR NOT NULL,
    location VARCHAR,
    latitude NUMERIC,
    longitude NUMERIC
)
""")

# For time table, BIGINT is used to store timestamp value to avoid
# out-of-range error when using INT datatype
time_table_create = ("""
CREATE TABLE time(
    start_time BIGINT PRIMARY KEY,
    hour INT NOT NULL,
    day INT NOT NULL,
    week INT NOT NULL,
    month VARCHAR NOT NULL,
    year INT NOT NULL,
    weekday INT NOT NULL
)
""")

# INSERT RECORDS

# insert a songplay record with all fields except primary key songplay_id
# which is auto-generated by Postgres's SERIAL datatype.
songplay_table_insert = ("""
INSERT INTO songplays(
  start_time, user_id, level, song_id, 
  artist_id, session_id, location, user_agent
)
VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
""")

# insert a user record, update user's level to the new value 
# if the user_id already exists
user_table_insert = ("""
INSERT INTO users(user_id, first_name, last_name, gender, level)
VALUES (%s, %s, %s, %s, %s)
ON CONFLICT (user_id)
DO UPDATE
    SET level=EXCLUDED.level;
""")

# insert a song record, ignore if the song_id already exists
song_table_insert = ("""
INSERT INTO songs (song_id, title, artist_id, year, duration)
VALUES (%s, %s, %s, %s, %s)
ON CONFLICT (song_id)
DO NOTHING
""")

# insert an artist record, ignore if the artist_id already exists
artist_table_insert = ("""
INSERT INTO artists (artist_id, name, location, latitude, longitude)
VALUES (%s, %s, %s, %s, %s)
ON CONFLICT (artist_id) 
DO NOTHING;
""")

# insert a time record, ignore if the timestamp value already exists
time_table_insert = ("""
INSERT INTO time (start_time, hour, day, week, month, year, weekday)
VALUES (%s, %s, %s, %s, %s, %s, %s)
ON CONFLICT (start_time) 
DO NOTHING
""")

# FIND SONGS

# Having song's title, duration and artist's name, find the corresponding
# song's id and artist's id by joining songs and artists table.
song_select = ("""
SELECT song_id, artist_id FROM songs JOIN artists USING(artist_id)
WHERE title=%s AND name=%s AND duration=%s
""")

# QUERY LISTS

create_table_queries = [songplay_table_create, user_table_create, song_table_create, artist_table_create, time_table_create]
drop_table_queries = [songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop]